<div id="introduction">
  <h1>Progressive Enhancement Demo</h1>
  <p>
    Progressive Enhancement is a strategy for building websites and webapps
    that are built around the assumption that some user agents or browsers suck,
    but they should still be able to access the page,
    while more capable browsers should be able to benefit from the latest gimmicks.
    The idea is simple: rather than start designing for fanciest browsers
    and work your way down plugging holes where the "lesser" browsers fail
    (so-called "graceful degradation"),
    you start simple and add the fancier features on top.
  </p>

  <h2>JavaScript</h2>
  <p>
    One of the biggest challenges in designing for progressive enhancement
    is JavaScript, or rather the lack thereof.
    JavaScript is incredibly useful and although almost all browsers
    have very decent support for it,
    there is still a slight chance 
    that your visitors are surfing without JavaScript.
    Either their browser does not support it,
    or they turned it off for whatever reason<sup><a href="#footnote-1" id="r1">1</a></sup>.
    It may not even be their fault that JavaScript is not working;
    maybe you messed up and introduced a bug
    that causes JavaScript execution to halt.
  </p>
  <p>
    Designing without JavaScript ruins all the fun.
    It means no AJAX, no cool jQuery animation tricks
    and no dynamic updates.
    These things are all very useful and we still want to be able to use them
    for the majority of users who <em>do</em> have a decent browser.
  </p>

  <h2>AJAX</h2>
  <p>
    For dynamic AJAX updates, this specifically means
    that anything that triggers a dynamic update has a static counterpart.
    For example, a button that submits a form posts to a real form
    that shows the results. 
    A link that refreshes part of the page,
    points to a valid URL with the update of that page.
  </p>
  <p>
    For example, we don't do this:<br/>
    <code><%=escape_html '<a href="#" onClick="fancyAjaxUpdate()"/>click me</a>' %></code>.
    The link leads nowhere and not having JavaScript
    (or the fancyAjaxUpdate() method being broken) results in a dead site.
  </p>
  <p>
    Much nicer would be:<br/>
    <code><%=escape_html '<a href="mypage.html" onClick="fancyAjaxLoad(\'mypage\'); return false">my page</a>' %></code>.
    This way, we have a valid link to the page, but if we have JavaScript
    we load it dynamically instead.
    This has one last problem in that it breaks the browser history,
    resulting in (among other things) 
    non-working back buttons and a lot of confusion;
    however, this can be fixed with the history API introduced in HTML5.
  </p>
  <p>
    Unfortunately, it is a pain in the ass to design like this.
    If we are unlucky, it requires us to do all the work double:
    first we need make sure that we have a valid "mypage.html"
    and then we need to put just the content elsewhere,
    so we can dynamically retrieve that using AJAX.
    Then we need to deal with the browser history
    and it all just becomes too messy and we give up.
  </p>
  <h2>A better solution</h2>
  <p>
    This little proof of concept shows that it can be easy
    to have your cake and eat it.
    Using <a href="https://github.com/mtrpcic/pathjs">Path.js</a>, 
    a little jQuery and a wafer thin Sinatra backend
    (which could also be Ruby on Rails, PHP or anything with a decent template
    engine and router),
    we have a page that works identically whether it is accessed
    with or without JavaScript (except it is much snappier with JavaScript).<br/>
    To read on, go to <a href="/pages/progressive">the next page</a>.
  </p>


  <aside>
    <ul style="list-style-type: none">
      <li><a id="footnote-1" href="#r1">[1]</a>
      You might not even want to assume a user is even using a browser.
      Maybe they are using cURL or wget,
      or maybe they are Googlebot or some other web crawler.</li>
  </aside>

</div>
